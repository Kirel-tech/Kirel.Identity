@page "/users"
@using CurrieTechnologies.Razor.Clipboard
@using Kirel.Blazor.Shared
@using System.Globalization
@using Kirel.Identity.DTOs
@inject IHttpClientFactory HttpClientFactory
@inject IDialogService DialogService
@inject ClipboardService Clipboard


<style>
    .mud-table-dense * .mud-table-row .mud-table-cell {
        padding: 0px 10px 0px 10px;
        padding-inline-start: 10px;
        padding-inline-end: 10px;
    }
    .mud-chip .mud-chip-icon {
        margin-left: 0px;
        margin-right: 0px;
        margin-inline-start: 0px;
        margin-inline-end: 0px;
        color: inherit;
    }
    td.min {
        width: 1%;
        white-space: nowrap;
    }
</style>

<MudTable Bordered="@true" Striped="@true" Dense="@true" @ref="_table" ServerData="@(new Func<TableState, Task<TableData<UserDto>>>(ServerReload))" Hover="true">
    <ToolBarContent>
        <MudText Class="small">Add User</MudText>
        <MudIconButton Class="float-left" Icon="@Icons.Material.Rounded.Add" Color="Color.Success" OnClick="@(() => ShowUserDialog(null))" aria-label="add"></MudIconButton>
        <MudSpacer/>
        <MudTextField T="string" ValueChanged="@(OnSearch)" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Created" T="UserDto">Created</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Updated" T="UserDto">Updated</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Username" T="UserDto">Username</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Name" T="UserDto">Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="LastName" T="UserDto">LastName</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Email" T="UserDto">Email</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="PhoneNumber" T="UserDto">Phone Number</MudTableSortLabel>
        </MudTh>
        <MudTh>Lockout Enabled</MudTh>
        <MudTh>Edit</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="min" DataLabel="Id">
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.ContentCopy" Color="Color.Info"
                           @onclick="async _ => await Clipboard.WriteTextAsync(context.Id.ToString())">
            </MudIconButton>
        </MudTd>
        <MudTd Class="min" DataLabel="Created">@context.Created.ToString(CultureInfo.CurrentCulture)</MudTd>
        <MudTd Class="min" DataLabel="Updated">@context.Updated?.ToString(CultureInfo.CurrentCulture)</MudTd>
        <MudTd DataLabel="UserName">@context.UserName</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="LastName">@context.LastName</MudTd>
        <MudTd DataLabel="Email">
            <MudChip Size="Size.Small" Color="@(context.EmailConfirmed ? Color.Success : Color.Default)"
                     Icon="@(!context.EmailConfirmed ? Icons.Material.Filled.DoNotDisturbAlt : Icons.Material.Filled.Check)">
            </MudChip>
            @context.Email
        </MudTd>
        <MudTd Class="min" DataLabel="PhoneNumber">
            <MudChip Size="Size.Small" Color="@(context.PhoneNumberConfirmed ? Color.Success : Color.Default)"
                     Icon="@(!context.PhoneNumberConfirmed ? Icons.Material.Filled.DoNotDisturbAlt : Icons.Material.Filled.Check)">
            </MudChip>
            @context.PhoneNumber
        </MudTd>
        <MudTd Class="min" DataLabel="Lockout enabled">
            <MudChip Size="Size.Small" Color="@(context.LockoutEnabled ? Color.Error : Color.Default)"
                     Icon="@Icons.Material.Filled.Check">
            </MudChip>
        </MudTd>
        <MudTd Class="min" Style="white-space: nowrap; width: 1%;" DataLabel="Edit">
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.TwoTone.Edit" Color="Color.Info"
                           OnClick="@(() => ShowUserDialog(context))">
            </MudIconButton>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {
    private readonly string _relativeUrl = "users";
    private string _searchString = "";
    private MudTable<UserDto> _table;
    private HttpClient _httpClient;

    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("IdentityAuthorized");
        await base.OnInitializedAsync();
    }

    private async Task<TableData<UserDto>> ServerReload(TableState state)
    {
        var uriParamsStr = HttpRequestParamsGenerator.GetListParams(state);
        if (!string.IsNullOrEmpty(_searchString))
            uriParamsStr += $"&search={_searchString}";

        var request = new HttpRequestMessage(HttpMethod.Get, $"{_relativeUrl}?{uriParamsStr}");
        var response = await _httpClient.SendAsync(request);
        if (!response.IsSuccessStatusCode) return new TableData<UserDto>();
        var paginatedList = await response.Content.ReadFromJsonAsync<PaginatedItemsDto<UserDto>>();
        if (paginatedList != null)
        {
            return new TableData<UserDto> { TotalItems = paginatedList.Pagination.TotalCount, Items = paginatedList.Items };
        }
        return new TableData<UserDto>();
    }

    private async Task ReloadServerDataOnDialogClose(IDialogReference dialogReference)
    {
        var diagResult = await dialogReference.Result;
        if (diagResult != null)
        {
            await _table.ReloadServerData();
        }
    }

    private async void ShowUserDialog(UserDto userDto)
    {
        var dialogOptions = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters { { "Dto", userDto } };
        var dialog = await DialogService.ShowAsync<UserDialog>("User", parameters, dialogOptions);
        await ReloadServerDataOnDialogClose(dialog);
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _table?.ReloadServerData();
    }

}