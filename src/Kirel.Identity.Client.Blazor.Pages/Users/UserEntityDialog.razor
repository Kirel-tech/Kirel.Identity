@typeparam TClaimCreateDto where TClaimCreateDto: KirelClaimCreateDto
@typeparam TClaimUpdateDto where TClaimUpdateDto: KirelClaimUpdateDto
@typeparam TClaimDto where TClaimDto : KirelClaimDto
@typeparam TRoleKey where TRoleKey : IComparable, IComparable<TRoleKey>, IEquatable<TRoleKey>
@typeparam TRoleDto where TRoleDto : KirelRoleDto<TRoleKey, TClaimDto>
@typeparam TUserKey where TUserKey : IComparable, IComparable<TUserKey>, IEquatable<TUserKey>
@typeparam TUserCreateDto where TUserCreateDto : KirelUserCreateDto<TRoleKey, TClaimCreateDto>, new()
@typeparam TUserUpdateDto where TUserUpdateDto : KirelUserUpdateDto<TRoleKey, TClaimUpdateDto>, new()
@typeparam TUserDto where TUserDto : KirelUserDto<TUserKey, TRoleKey, TClaimDto>, new()

<EntityDialog TCreateDto="TUserCreateDto" TUpdateDto="TUserUpdateDto" TDto="TUserDto"
              CreateDto="@CreateDto" UpdateDto="@UpdateDto" Dto="@Dto"
              HttpClientName="@UsersHttpClientName" HttpRelativeUrl="@UsersHttpRelativeUrl" Options="Options"
              BeforeCreateRequest="BeforeEntityCreateRequest" BeforeUpdateRequest="BeforeEntityUpdateRequest">
    <Content>
        <MudContainer Class="mx-auto px-4 justify-center my-4 mud-text-align-center">
            <MudGrid>
                <MudItem xs="6">
                    <EntityProperties CreateDto="@CreateDto" UpdateDto="@UpdateDto" Dto="Dto"
                                      TCreateDto="TUserCreateDto" TUpdateDto="TUserUpdateDto" TDto="TUserDto" 
                                      Options="@Options"/>
                    @PropertiesAdditionalContent
                </MudItem>
                <MudItem xs="6">
                    <MudText Typo="Typo.body1"><b>Claims</b></MudText>
                    @foreach (var claim in _claims)
                    {
                        <MudItem xs="12" Class="d-flex flex-row">
                            <MudTextField Class="mr-1" @bind-Value="@claim.Type" Label="Type" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                            <MudTextField Class="mr-1" @bind-Value="@claim.Value" Label="Value" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => RemoveClaim(claim))" Color="Color.Error" Size="Size.Small" Class="ma-n1"/>
                        </MudItem>
                    }
                    <MudIconButton Class="d-flex flex-row my-n1" Icon="@Icons.Material.Rounded.Add" Color="Color.Success" OnClick="AddClaim" aria-label="add"></MudIconButton>
                    <MudText Typo="Typo.body1"><b>Roles</b></MudText>
                    @foreach (var role in _userRoles)
                    {
                        <MudItem xs="12" Class="d-flex flex-row">
                            <MudTextField Class="mr-1" Disabled="true" @bind-Value="@role.Value.Name" Label="Role" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
                            <MudIconButton Icon="@Icons.Material.Sharp.Delete" OnClick="@(() => _userRoles.Remove(role.Key))" Color="Color.Error" Size="Size.Small"/>
                        </MudItem>
                    }
                    <MudItem xs="12" Class="d-flex flex-row">
                        <MudAutocomplete T="TRoleDto" Label="Add to role" @bind-Value="@_foundedRole" SearchFuncWithCancel="@SearchRoles" Variant="Variant.Text" ShowProgressIndicator="true"
                                         ToStringFunc="@(r=> r==null?null : $"{r.Name}")"/>
                        <MudIconButton Class="d-flex flex-row my-n1" Icon="@Icons.Material.Rounded.Add" Color="Color.Success" OnClick="@(AddRole)" aria-label="add"></MudIconButton>
                    </MudItem>
                    @ClaimsAndRolesAdditionalContent
                </MudItem>
            </MudGrid>
            @AdditionalContent
        </MudContainer>
    </Content>
</EntityDialog>